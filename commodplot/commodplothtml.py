"""Set of utilities to output html files of plotly charts using jinja tempaltes"""import plotly.graph_objects as goimport osfrom pathlib import Pathimport plotlyfrom jinja2 import Environment, FileSystemLoaderfrom datetime import datetime# margin to use in HTML charts - make charts bigger but leave space for titlenarrow_margin = {'l':2, 'r':2, 't':30, 'b':10}def plhtml(fig, margin=narrow_margin, **kwargs):    """    Given a plotly figure, return it as a div    """    # if 'margin' in kwargs:    if fig is not None:        fig.update_layout(margin=margin)        fig.update_xaxes(automargin=True)        fig.update_yaxes(automargin=True)        return plotly.offline.plot(fig, include_plotlyjs=False, output_type='div')    return ''def jinja_finalize(value):    """    Finalize for jinja which makes empty entries show as blank rather than none    and converts plotly charts to html divs    :param value:    :return:    """    if value is None:        return ''    if isinstance(value, go.Figure):        return plhtml(value)    return valuedef convert_dict_plotly_fig_html_div(d):    """    Given a dict (that might be passed to jinja), convert all plotly figures of html divs    """    for k, v in d.items():        if isinstance(d[k], go.Figure):            d[k] = plhtml(d[k])        if isinstance(d[k], dict):            convert_dict_plotly_fig_html_div(d[k])    return ddef output_html(data:dict, template:Path, filename:Path):    """    Given a dict and html jinja template output html    :param data:    :param template:    :param filename:    :return:    """    data = convert_dict_plotly_fig_html_div(data)    dirname = template.parent    file_loader = FileSystemLoader(str(dirname.absolute()))    env = Environment(loader=file_loader)    template = env.get_template(str(template.absolute()))    # template.globals['fcu'] = fcu    output = template.render(pagetitle=data['pagetitle'], last_gen_time=datetime.now(), data=data)    with open(filename, "w", encoding='utf8') as fh:        fh.write(output)    return filename